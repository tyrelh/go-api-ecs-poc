// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package sql

import (
	"context"
	"database/sql"
)

const createReward = `-- name: CreateReward :execresult
INSERT INTO rewards (
  brand, currency, denomination
) VALUES (
  ?, ?, ?
)
`

type CreateRewardParams struct {
	Brand        sql.NullString
	Currency     sql.NullString
	Denomination sql.NullFloat64
}

func (q *Queries) CreateReward(ctx context.Context, arg CreateRewardParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createReward, arg.Brand, arg.Currency, arg.Denomination)
}

const deleteReward = `-- name: DeleteReward :exec
DELETE FROM rewards
WHERE id = ?
`

func (q *Queries) DeleteReward(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteReward, id)
	return err
}

const getReward = `-- name: GetReward :one
SELECT id, brand, currency, denomination FROM rewards
WHERE id = ? LIMIT 1
`

func (q *Queries) GetReward(ctx context.Context, id uint64) (Reward, error) {
	row := q.db.QueryRowContext(ctx, getReward, id)
	var i Reward
	err := row.Scan(
		&i.ID,
		&i.Brand,
		&i.Currency,
		&i.Denomination,
	)
	return i, err
}

const listRewards = `-- name: ListRewards :many
SELECT id, brand, currency, denomination FROM rewards
ORDER BY brand
`

func (q *Queries) ListRewards(ctx context.Context) ([]Reward, error) {
	rows, err := q.db.QueryContext(ctx, listRewards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Reward
	for rows.Next() {
		var i Reward
		if err := rows.Scan(
			&i.ID,
			&i.Brand,
			&i.Currency,
			&i.Denomination,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
